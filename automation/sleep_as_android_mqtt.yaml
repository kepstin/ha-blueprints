blueprint:
  name: Sleep as Android (MQTT)
  description: >
    Perform actions based on events received from Sleep as Android's MQTT
    Automation.
    
    
    You must set up the
    [Sleep as Android MQTT Automation](https://docs.sleep.urbandroid.org/services/mqtt.html)
    in the app, and you should turn off any events that you are not using in
    Settings → Services → Automation → Events.
    For more details on what triggers each event, see the
    [Sleep as Android Automation docs](https://docs.sleep.urbandroid.org/services/automation.html#events).


    Events from realtime sleep phase tracking are not made available, since the
    app produces lots of events and the data is low quality (sleep phases can
    only be detected reliably from whole-night data).


    Version: 0.3.1
  source_url: https://github.com/kepstin/ha-blueprints/blob/main/blueprints/sleep_as_android_mqtt.yaml
  domain: automation

  input:
    topic:
      name: MQTT Topic
      description: >
        The MQTT Topic that Sleep as Android is sending events to.
        This must match the configuration set in the Sleep as Android app
        exactly (case and punctuation matters).
        Note that each user (device) needs a separate topic.
      selector:
        text:
      default: SleepAsAndroid

    condition:
      name: Condition
      description: >
        Additional condition to check before performing any actions.
        You might want to confirm that the user is home, for example.
      selector:
        condition:
      default: []

    sleep_tracking_started_action:
      name: Sleep tracking start
      description: >
        Action to perform when sleep tracking is started.
        Sleep tracking can be started manually, or might be triggered
        automatically depending on app configuration.
      selector:
        action:
      default: []

    sleep_tracking_stopped_action:
      name: Sleep tracking stop
      description: >
        Action to perform when sleep tracking is stopped.
        This event will happen in all cases when sleep tracking is stopped.
        Some examples include manually stopping tracking or dismissing an alarm.


        Note that this event will not be triggered if sleep tracking was not
        started.
        The "Smart Period" feature does start sleep tracking.
      selector:
        action:
      default: []

    sleep_tracking_paused_action:
      name: Sleep tracking pause
      description: Action to perform when sleep tracking is manually paused.
      selector:
        action:
      default: []

    sleep_tracking_resumed_action:
      name: Sleep tracking resume
      description: >
        Action to perform when sleep tracking resumes after being manually
        paused.
      selector:
        action:
      default: []
      
    alarm_snooze_clicked_action:
      name: Alarm snooze
      description: >
        You have snoozed a ringing alarm.


        #### Variables:

        `alarm_start_time`: The time of the alarm.

        `alarm_label`: The label of the alarm.
        This will not be defined if the alarm has no label.
      selector:
        action:
      default: []
      
    alarm_snooze_canceled_action:
      name: Snooze canceled
      description: >
        You have canceled an alarm that is currently snoozed.


        #### Variables:

        `alarm_start_time`: The time of the alarm.

        `alarm_label`: The label of the alarm.
        This will not be defined if the alarm has no label.
      selector:
        action:
      default: []
        
    time_to_bed_alarm_alert_action:
      name: Bedtime
      description: >
        Fires when you get a bedtime notification.


        The bedtime notification is sent prior to the alarm time based on the
        desired sleep duration goal and set time to prepare for bed.
        Additional adjustments may be applied based on smart wake up period and
        sleep deficit.
        
        
        #### Variables:
        
        `alarm_start_time`: The time of the alarm that triggered the
        notification.

        `alarm_label`: The label of the alarm that triggered the notification.
        This will not be defined if the alarm has no label.
      selector:
        action:
      default: []
      
    alarm_alert_start_action:
      name: Alarm started
      description: >
        Fires when alarm starts.


        #### Variables:

        `alarm_start_time`: The time of the alarm.

        `alarm_label`: The label of the alarm.
        This will not be defined if the alarm has no label.
      selector:
        action:
      default: []
        
    alarm_alert_dismiss_action:
      name: Alarm dismiss
      description: >
        Fires when you dismiss alarm (after you solve CAPTCHA, if it's set).


        #### Variables:

        `alarm_start_time`: The time of the alarm.
        This will not be defined if the alarm was for a nap.

        `alarm_label`: The label of the alarm.
        This will not be defined if the alarm has no label, or if the alarm was
        for a nap.
      selector:
        action:
      default: []
      
    alarm_skip_next_action:
      name: Alarm skip next
      description: >
        Fires when you dismiss an alarm from notification before it rings.


        #### Variables:

        `alarm_start_time`: The time of the alarm.

        `alarm_label`: The label of the alarm.
        This will not be defined if the alarm has no label.
      selector:
        action:
      default: []

    antisnoring_action:
      name: Anti-Snoring
      description: >
        Fires when antisnoring is triggered.
      selector:
        action:
      default: []

    smart_period_action:
      name: Smart period
      description: >
        Fires at the start of the smart period.
      selector:
        action:
      default: []

    before_smart_period_action:
      name: Before smart period
      description: >
        Fires 45 minutes before the start of smart period.
      selector:
        action:
      default: []

    lullaby_start_action:
      name: Lullabies start
      description: >
        Fires when lullaby starts playing.
      selector:
        action:
      default: []

    lullaby_stop_action:
      name: Lullabies stop
      description: >
        Fires when lullaby is stopped (either manually or automatically).
      selector:
        action:
      default: []

    lullaby_volume_down_action:
      name: Lullabies volume down
      description: >
        Fires when we detect you fell asleep and started lowering the volume of
        lullabies.
      selector:
        action:
      default: []

    apnea_alarm_action:
      name: Low breath rate alarm
      description: >
        Fires when we detect a significant dip in your oxygen levels.
      selector:
        action:
      default: []

    sound_event_action:
      name: Sound event
      description: >
        Fires when a sound event is detected.

        #### Variables

        `sound_event`: One of the following values:


        * `snore`: Snoring

        * `talk`: Talking

        * `cough`: Cough and sneeze

        * `baby`: Baby cry

        * `laugh`: Laughter
      selector:
        action:
      default: []

    before_alarm_action:
      name: Before alarm notification
      description: >
        Action to perform 1 hour before the next alarm starts.
        While this event is intended to control whether an option is available
        to dismiss an alarm before it starts, the event could also be used to
        e.g. activate a sunrise light effect prior to the alarm time.
        
        
        The Sleep as Android documentation incorrectly has this event listed as
        `show_skip_next_alarm`, and says it includes the alarm start timestamp,
        but the `before_alarm` event does not include a timestamp.
      selector:
        action:
      default: []
    
    alarm_rescheduled_action:
      name: Reschedule alarm
      description: >
        Fired whenever the time of the next active alarm has changed.
        This includes things like creating or deleting an alarm, or snoozing
        an alarm.
        No information is provided about the new time of the alarm.
      selector:
        action:
      default: []
      
    debug_stored_traces:
      name: "Debug: Number of stored traces"
      description: >
        Sleep as Android generates a large number of events while you are
        sleeping.
        As a result, the default number of stored traces (5) might not contain
        the event you are looking for when you wake up.
      selector:
        number:
          min: 1
          max: 50
          mode: box
      default: 5

mode: queued

trace:
  stored_traces: !input debug_stored_traces

trigger:
  - platform: mqtt
    topic: !input topic
    variables:
      event: >
        {{
          (trigger.payload_json.event | regex_findall('^sound_event'))[0]
          | default(trigger.payload_json.event)
        }}
      is_alarm_event: >
        {{
          event in [
            'alarm_snooze_clicked',
            'alarm_snooze_canceled',
            'time_to_bed_alarm_alert',
            'alarm_alert_start',
            'alarm_alert_dismiss',
            'alarm_skip_next',
            'before_smart_period'
          ]
        }}
      alarm_start_time: >
        {{
          as_datetime(trigger.payload_json.value1 | int / 1000).isoformat()
          if is_alarm_event
            and trigger.payload_json.value1 is defined
            and trigger.payload_json.value1 != 'null'
          else none
        }}
      alarm_label: >
        {{
          trigger.payload_json.value2
          if is_alarm_event and trigger.payload_json.value2 is defined
          else none
        }}
      sound_event: >
        {{
          (trigger.payload_json.event | regex_findall('^sound_event_(.*)'))[0]
          if event == 'sound_event'
          else none
        }}

condition: !input condition

action:
  - choose:
      - conditions: "{{ event == 'sleep_tracking_started' }}"
        sequence: !input sleep_tracking_started_action
      - conditions: "{{ event == 'sleep_tracking_stopped' }}"
        sequence: !input sleep_tracking_stopped_action
      - conditions: "{{ event == 'sleep_tracking_paused' }}"
        sequence: !input sleep_tracking_paused_action
      - conditions: "{{ event == 'sleep_tracking_resumed' }}"
        sequence: !input sleep_tracking_resumed_action
      - conditions: "{{ event == 'alarm_snooze_clicked' }}"
        sequence: !input alarm_snooze_clicked_action
      - conditions: "{{ event == 'alarm_snooze_canceled' }}"
        sequence: !input alarm_snooze_canceled_action
      - conditions: "{{ event == 'time_to_bed_alarm_alert' }}"
        sequence: !input time_to_bed_alarm_alert_action
      - conditions: "{{ event == 'alarm_alert_start' }}"
        sequence: !input alarm_alert_start_action
      - conditions: "{{ event == 'alarm_alert_dismiss' }}"
        sequence: !input alarm_alert_dismiss_action
      - conditions: "{{ event == 'alarm_skip_next' }}"
        sequence: !input alarm_skip_next_action
      - conditions: "{{ event == 'antisnoring' }}"
        sequence: !input antisnoring_action
      - conditions: "{{ event == 'smart_period' }}"
        sequence: !input smart_period_action
      - conditions: "{{ event == 'before_smart_period' }}"
        sequence: !input before_smart_period_action
      - conditions: "{{ event == 'lullaby_start' }}"
        sequence: !input lullaby_start_action
      - conditions: "{{ event == 'lullaby_stop' }}"
        sequence: !input lullaby_stop_action
      - conditions: "{{ event == 'lullaby_volume_down' }}"
        sequence: !input lullaby_volume_down_action
      - conditions: "{{ event == 'apnea_alarm' }}"
        sequence: !input apnea_alarm_action
      - conditions: "{{ event == 'sound_event' }}"
        sequence: !input sound_event_action
      - conditions: "{{ event == 'before_alarm' }}"
        sequence: !input before_alarm_action
      - conditions: "{{ event == 'alarm_rescheduled' }}"
        sequence: !input alarm_rescheduled_action
