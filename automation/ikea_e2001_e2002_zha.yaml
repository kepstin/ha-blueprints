blueprint:
  name: IKEA E2001/E2002 STYRBAR Remote (ZHA)
  description: >
    Automation for performing actions triggered by an IKEA E2001 or E2002
    STYRBAR Remote (4-button remote).
    Supports ZHA only.
    
    
    
    This integration generates events compatible with Hooks from the
    [Awesome HA Blueprints](https://epmatt.github.io/awesome-ha-blueprints)
    project.
    
    
    
    Version: 0.1.0
  source_url: https://github.com/kepstin/ha-blueprints/blob/main/automation/ikea_e2001_e2002_zha.yaml
  domain: automation
  input:
    zha_controller_device:
      name: ZHA Controller Device
      selector:
        device:
          integration: zha
          manufacturer: IKEA of Sweden
          model: Remote Control N2
          multiple: false
    
    helper_last_controller_event:
      name: Last Controller Event Helper
      description: >
        A helper that's used to store state of the automation between runs.
        The helper is needed in order for button release events and emulated
        button double press events to work.



        You will need to manually create a "Text" Helper (`input_text` entity)
        separately.
        Ensure that the Minimum length is set to 0, and Maximum length is set
        to 255.
        Each automation created from this blueprint needs a separate helper.
      selector:
        entity:
          filter:
            domain: input_text

    action_button_up_short:
      name: Brightness up button short press action
      default: []
      selector:
        action:
        
    emulate_button_up_double:
      name: Emulate brightness up button double press
      description: >
        Enabling this option will allow detecting a double press and running
        a separate action.
        In order to detect a double press, the single press action will be
        delayed by the time configured in _Double press delay_, below.
      default: false
      selector:
        boolean:
        
    action_button_up_double:
      name: Brightness up button double press action
      default: []
      selector:
        action:
    
    action_button_up_long:
      name: Brightness up button long press action
      default: []
      selector:
        action:
        
    action_button_up_release:
      name: Brightness up button long press release action
      default: []
      selector:
        action:
        
    button_up_long_loop:
      name: Loop brightness up button long press action until release
      default: false
      selector:
        boolean:
        
    button_up_long_max_loop_repeats:
      name: Brightness up button max loop repeats
      default: 500
      selector:
        number:
          min: 1
          max: 5000
          mode: slider
          step: 1
    
    action_button_down_short:
      name: Brightness down button short press action
      default: []
      selector:
        action:
    
    emulate_button_down_double:
      name: Emulate brightness down button double press
      description: >
        Enabling this option will allow detecting a double press and running
        a separate action.
        In order to detect a double press, the single press action will be
        delayed by the time configured in _Double press delay_, below.
      default: false
      selector:
        boolean:
    
    action_button_down_double:
      name: Brightness down button double press action
      default: []
      selector:
        action:
        
    action_button_down_long:
      name: Brightness down button long press action
      default: []
      selector:
        action:

    action_button_down_release:
      name: Brightness down button long press release action
      default: []
      selector:
        action:
        
    button_down_long_loop:
      name: Loop brightness down button long press action until release
      default: false
      selector:
        boolean:
        
    button_down_long_max_loop_repeats:
      name: Brightness down button max loop repeats
      default: 500
      selector:
        number:
          min: 1
          max: 5000
          mode: slider
          step: 1

    action_button_left_short:
      name: Left button short press action
      default: []
      selector:
        action:
    
    emulate_button_left_double:
      name: Emulate left button double press
      description: >
        Enabling this option will allow detecting a double press and running
        a separate action.
        In order to detect a double press, the single press action will be
        delayed by the time configured in _Double press delay_, below.
      default: false
      selector:
        boolean:
    
    action_button_left_double:
      name: Left button double press action
      default: []
      selector:
        action:

    action_button_left_long:
      name: Left button long press action
      default: []
      selector:
        action:
        
    action_button_left_release:
      name: Left button long press release action
      default: []
      selector:
        action:
        
    button_left_long_loop:
      name: Loop left button long press action until release
      default: false
      selector:
        boolean:
        
    button_left_long_max_loop_repeats:
      name: Left button max loop repeats
      default: 500
      selector:
        number:
          min: 1
          max: 5000
          mode: slider
          step: 1

    action_button_right_short:
      name: Right button short press action
      default: []
      selector:
        action:
    
    emulate_button_right_double:
      name: Emulate right button double press
      description: >
        Enabling this option will allow detecting a double press and running
        a separate action.
        In order to detect a double press, the single press action will be
        delayed by the time configured in _Double press delay_, below.
      default: false
      selector:
        boolean:
    
    action_button_right_double:
      name: Left button double press action
      default: []
      selector:
        action:

    action_button_right_long:
      name: Left button long press action
      default: []
      selector:
        action:
        
    action_button_right_release:
      name: Left button long press release action
      default: []
      selector:
        action:
        
    button_right_long_loop:
      name: Loop left button long press action until release
      default: false
      selector:
        boolean:
        
    button_right_long_max_loop_repeats:
      name: Left button max loop repeats
      default: 500
      selector:
        number:
          min: 1
          max: 5000
          mode: slider
          step: 1

    double_press_delay:
      name: Double press delay
      description: >
        Max delay allowed between the first and second press in order to be
        counted as a double press event.
      default: 500
      selector:
        number:
          min: 100
          max: 5000
          unit_of_measurement: ms
          step: 10

mode: restart
max_exceeded: silent

variables:
  helper_last_controller_event: !input helper_last_controller_event
  emulate_button_up_double: !input emulate_button_up_double
  button_up_long_loop: !input button_up_long_loop
  button_up_long_max_loop_repeats: !input button_up_long_max_loop_repeats
  emulate_button_down_double: !input emulate_button_down_double
  button_down_long_loop: !input button_down_long_loop
  button_down_long_max_loop_repeats: !input button_down_long_max_loop_repeats
  emulate_button_left_double: !input emulate_button_left_double
  button_left_long_loop: !input button_left_long_loop
  button_left_long_max_loop_repeats: !input button_left_long_max_loop_repeats
  emulate_button_right_double: !input emulate_button_right_double
  button_right_long_loop: !input button_right_long_loop
  button_right_long_max_loop_repeats: !input button_right_long_max_loop_repeats
  double_press_delay: !input double_press_delay

trigger:
  - alias: Brightness up button short press
    id: button_up_short
    platform: device
    device_id: !input zha_controller_device
    domain: zha
    type: remote_button_short_press
    subtype: turn_on
    
  - alias: Brightness up button long press
    id: button_up_long
    platform: device
    device_id: !input zha_controller_device
    domain: zha
    type: remote_button_long_press
    subtype: dim_up
    
  - alias: Brightness up button long press release
    id: button_up_release
    platform: device
    device_id: !input zha_controller_device
    domain: zha
    type: remote_button_long_release
    subtype: dim_up
    
  - alias: Brightness down button short press
    id: button_down_short
    platform: device
    device_id: !input zha_controller_device
    domain: zha
    type: remote_button_short_press
    subtype: turn_off
    
  - alias: Brightness down button long press
    id: button_down_long
    platform: device
    device_id: !input zha_controller_device
    domain: zha
    type: remote_button_long_press
    subtype: dim_down
    
  - alias: Brightness down button long press release
    id: button_down_release
    platform: device
    device_id: !input zha_controller_device
    domain: zha
    type: remote_button_long_release
    subtype: dim_down
    
  - alias: Left button short press
    id: button_left_short
    platform: device
    device_id: !input zha_controller_device
    domain: zha
    type: remote_button_short_press
    subtype: left
  
  - alias: Left button long press
    id: button_left_long
    platform: device
    device_id: !input zha_controller_device
    domain: zha
    type: remote_button_long_press
    subtype: left
    
  - alias: Right button short press
    id: button_right_short
    platform: device
    device_id: !input zha_controller_device
    domain: zha
    type: remote_button_short_press
    subtype: right
    
  - alias: Right button long press
    id: button_right_long
    platform: device
    device_id: !input zha_controller_device
    domain: zha
    type: remote_button_long_press
    subtype: right
    
  - alias: Left/Right button long press release
    id: button_left_right_release
    platform: event
    event_type: zha_event
    event_data:
      device_id: !input zha_controller_device
      command: release

action:
  - variables:
      timestamp: "{{ trigger.event.time_fired | as_timestamp }}"
      last_controller_event: "{{ states(helper_last_controller_event) | from_json if helper_last_controller_event is not none and states(helper_last_controller_event) | regex_match('^\\{') else {} }}"
      last_controller_event_action: "{{ last_controller_event.a | default('') }}"
      last_controller_event_timedelta: "{{ trigger.event.time_fired - last_controller_event.t | as_datetime if last_controller_event.t is defined }}"

  - choose:
      - alias: Brightness up button short press
        conditions:
          - condition: trigger
            id: button_up_short
          - alias: Left/Right button long press workaround
            condition: template
            value_template: "{{ not (last_controller_event_action == 'button_left_right_long' and last_controller_event_timedelta < timedelta(seconds=1)) }}"
        sequence:
          - alias: Update last controller event helper
            service: input_text.set_value
            data:
              entity_id: !input helper_last_controller_event
              value: "{{ {'a': 'button_up_short', 't': timestamp } | to_json }}"
          - choose:
              - conditions: "{{ emulate_button_up_double }}"
                sequence:
                  - choose:
                      - conditions: "{{ last_controller_event_action == 'button_up_short' and last_controller_event_timedelta <= timedelta(milliseconds=double_press_delay) }}"
                        sequence:
                          - alias: Update last controller event helper
                            service: input_text.set_value
                            data:
                              entity_id: !input helper_last_controller_event
                              value: "{{ {'a': 'button_up_double', 't': timestamp } | to_json }}"
                          - alias: Send awesome-ha-blueprints controller event
                            event: ahb_controller_event
                            event_data:
                              controller: "{{ controller_id }}"
                              action: button_up_double
                          - alias: Run custom action
                            choose:
                              - conditions: []
                                sequence: !input action_button_up_double

                    default:
                      - alias: Wait for double press event to occur (automation will be restarted if received)
                        delay:
                          milliseconds: "{{ double_press_delay }}"
                      - alias: Send awesome-ha-blueprints controller event
                        event: ahb_controller_event
                        event_data:
                          controller: "{{ controller_id }}"
                          action: button_up_short
                      - alias: Run custom action
                        choose:
                          - conditions: []
                            sequence: !input action_button_up_short
            default:
              - alias: Send awesome-ha-blueprints controller event
                event: ahb_controller_event
                event_data:
                  controller: !input zha_controller_device
                  action: button_up_short
              - alias: Run custom action
                choose:
                  - conditions: []
                    sequence: !input action_button_up_short

      - conditions:
          - alias: Brightness up button long press
            condition: trigger
            id: button_up_long
        sequence:
          - alias: Update last controller event helper
            service: input_text.set_value
            data:
              entity_id: !input helper_last_controller_event
              value: "{{ {'a': 'button_up_long', 't': timestamp } | to_json }}"
          - alias: Send awesome-ha-blueprints controller event
            event: ahb_controller_event
            event_data:
              controller: !input zha_controller_device
              action: button_up_long
          - alias: Run custom action with looping
            repeat:
              sequence: !input action_button_up_long
              until: "{{ not button_up_long_loop or repeat.index >= button_up_long_max_loop_repeats | int }}"

      - conditions:
          - alias: Brightness up button long press release
            condition: trigger
            id: button_up_release
        sequence:
          - alias: Update last controller event helper
            service: input_text.set_value
            data:
              entity_id: !input helper_last_controller_event
              value: "{{ {'a': 'button_up_release', 't': timestamp } | to_json }}"
          - alias: Send awesome-ha-blueprints controller event
            event: ahb_controller_event
            event_data:
              controller: !input zha_controller_device
              action: button_up_release
          - alias: Run custom action
            choose:
              - conditions: []
                sequence: !input action_button_up_release

      - conditions:
          - alias: Brightness down button short press
            condition: trigger
            id: button_down_short
        sequence:
          - alias: Update last controller event helper
            service: input_text.set_value
            data:
              entity_id: !input helper_last_controller_event
              value: "{{ {'a': 'button_down_short', 't': timestamp } | to_json }}"
          - choose:
              - conditions: "{{ emulate_button_down_double }}"
                sequence:
                  - choose:
                      - conditions: "{{ last_controller_event_action == 'button_down_short' and last_controller_event_timedelta <= timedelta(milliseconds=double_press_delay) }}"
                        sequence:
                          - alias: Update last controller event helper
                            service: input_text.set_value
                            data:
                              entity_id: !input helper_last_controller_event
                              value: "{{ {'a': 'button_down_double', 't': timestamp } | to_json }}"
                          - alias: Send awesome-ha-blueprints controller event
                            event: ahb_controller_event
                            event_data:
                              controller: "{{ controller_id }}"
                              action: button_down_double
                          - alias: Run custom action
                            choose:
                              - conditions: []
                                sequence: !input action_button_down_double

                    default:
                      - alias: Wait for double press event to occur (automation will be restarted if received)
                        delay:
                          milliseconds: "{{ double_press_delay }}"
                      - alias: Send awesome-ha-blueprints controller event
                        event: ahb_controller_event
                        event_data:
                          controller: "{{ controller_id }}"
                          action: button_down_short
                      - alias: Run custom action
                        choose:
                          - conditions: []
                            sequence: !input action_button_down_short
            default:
              - alias: Send awesome-ha-blueprints controller event
                event: ahb_controller_event
                event_data:
                  controller: !input zha_controller_device
                  action: button_down_short
              - alias: Run custom action
                choose:
                  - conditions: []
                    sequence: !input action_button_down_short

      - conditions:
          - alias: Brightness down button long press
            condition: trigger
            id: button_down_long
        sequence:
          - alias: Update last controller event helper
            service: input_text.set_value
            data:
              entity_id: !input helper_last_controller_event
              value: "{{ {'a': 'button_down_long', 't': timestamp } | to_json }}"
          - alias: Send awesome-ha-blueprints controller event
            event: ahb_controller_event
            event_data:
              controller: !input zha_controller_device
              action: button_down_long
          - alias: Run custom action with looping
            repeat:
              sequence: !input action_button_down_long
              until: "{{ not button_down_long_loop or repeat.index >= button_down_long_max_loop_repeats | int }}"

      - conditions:
          - alias: Brightness down button long press release
            condition: trigger
            id: button_down_release
        sequence:
          - alias: Update last controller event helper
            service: input_text.set_value
            data:
              entity_id: !input helper_last_controller_event
              value: "{{ {'a': 'button_down_release', 't': timestamp } | to_json }}"
          - alias: Send awesome-ha-blueprints controller event
            event: ahb_controller_event
            event_data:
              controller: !input zha_controller_device
              action: button_down_release
          - alias: Run custom action
            choose:
              - conditions: []
                sequence: !input action_button_down_release

      - conditions:
          - alias: Left button short press
            condition: trigger
            id: button_left_short
        sequence:
          - alias: Update last controller event helper
            service: input_text.set_value
            data:
              entity_id: !input helper_last_controller_event
              value: "{{ {'a': 'button_left_short', 't': timestamp } | to_json }}"
          - choose:
              - conditions: "{{ emulate_button_left_double }}"
                sequence:
                  - choose:
                      - conditions: "{{ last_controller_event_action == 'button_left_short' and last_controller_event_timedelta <= timedelta(milliseconds=double_press_delay) }}"
                        sequence:
                          - alias: Update last controller event helper
                            service: input_text.set_value
                            data:
                              entity_id: !input helper_last_controller_event
                              value: "{{ {'a': 'button_left_double', 't': timestamp } | to_json }}"
                          - alias: Send awesome-ha-blueprints controller event
                            event: ahb_controller_event
                            event_data:
                              controller: "{{ controller_id }}"
                              action: button_left_double
                          - alias: Run custom action
                            choose:
                              - conditions: []
                                sequence: !input action_button_left_double

                    default:
                      - alias: Wait for double press event to occur (automation will be restarted if received)
                        delay:
                          milliseconds: "{{ double_press_delay }}"
                      - alias: Send awesome-ha-blueprints controller event
                        event: ahb_controller_event
                        event_data:
                          controller: "{{ controller_id }}"
                          action: button_left_short
                      - alias: Run custom action
                        choose:
                          - conditions: []
                            sequence: !input action_button_left_short
            default:
              - alias: Send awesome-ha-blueprints controller event
                event: ahb_controller_event
                event_data:
                  controller: !input zha_controller_device
                  action: button_left_short
              - alias: Run custom action
                choose:
                  - conditions: []
                    sequence: !input action_button_left_short
                    
      - conditions:
          - alias: Left button long press
            condition: trigger
            id: button_left_long
        sequence:
          - alias: Update last controller event helper
            service: input_text.set_value
            data:
              entity_id: !input helper_last_controller_event
              value: "{{ {'a': 'button_left_long', 't': timestamp } | to_json }}"
          - alias: Send awesome-ha-blueprints controller event
            event: ahb_controller_event
            event_data:
              controller: !input zha_controller_device
              action: button_left_long
          - alias: Run custom action with looping
            repeat:
              sequence: !input action_button_left_long
              until: "{{ not button_left_long_loop or repeat.index >= button_left_long_max_loop_repeats | int }}"

      - alias: Left button long press release
        conditions:
          - alias: Left/Right button long press release
            condition: trigger
            id: button_left_right_release
          - alias: Last event was Left button long press
            condition: template
            value_template: "{{ last_controller_event_action == 'button_left_long' }}"
        sequence:
          - alias: Update last controller event helper
            service: input_text.set_value
            data:
              entity_id: !input helper_last_controller_event
              value: "{{ {'a': 'button_left_release', 't': timestamp } | to_json }}"
          - alias: Send awesome-ha-blueprints controller event
            event: ahb_controller_event
            event_data:
              controller: !input zha_controller_device
              action: button_left_release
          - alias: Run custom action
            choose:
              - conditions: []
                sequence: !input action_button_left_release

      - conditions:
          - alias: Right button short press
            condition: trigger
            id: button_right_short
        sequence:
          - alias: Update last controller event helper
            service: input_text.set_value
            data:
              entity_id: !input helper_last_controller_event
              value: "{{ {'a': 'button_right_short', 't': timestamp } | to_json }}"
          - choose:
              - conditions: "{{ emulate_button_right_double }}"
                sequence:
                  - choose:
                      - conditions: "{{ last_controller_event_action == 'button_right_short' and last_controller_event_timedelta <= timedelta(milliseconds=double_press_delay) }}"
                        sequence:
                          - alias: Update last controller event helper
                            service: input_text.set_value
                            data:
                              entity_id: !input helper_last_controller_event
                              value: "{{ {'a': 'button_right_double', 't': timestamp } | to_json }}"
                          - alias: Send awesome-ha-blueprints controller event
                            event: ahb_controller_event
                            event_data:
                              controller: "{{ controller_id }}"
                              action: button_right_double
                          - alias: Run custom action
                            choose:
                              - conditions: []
                                sequence: !input action_button_right_double

                    default:
                      - alias: Wait for double press event to occur (automation will be restarted if received)
                        delay:
                          milliseconds: "{{ double_press_delay }}"
                      - alias: Send awesome-ha-blueprints controller event
                        event: ahb_controller_event
                        event_data:
                          controller: "{{ controller_id }}"
                          action: button_right_short
                      - alias: Run custom action
                        choose:
                          - conditions: []
                            sequence: !input action_button_right_short
            default:
              - alias: Send awesome-ha-blueprints controller event
                event: ahb_controller_event
                event_data:
                  controller: !input zha_controller_device
                  action: button_right_short
              - alias: Run custom action
                choose:
                  - conditions: []
                    sequence: !input action_button_right_short
                    
      - conditions:
          - alias: Right button long press
            condition: trigger
            id: button_right_long
        sequence:
          - alias: Update last controller event helper
            service: input_text.set_value
            data:
              entity_id: !input helper_last_controller_event
              value: "{{ {'a': 'button_right_long', 't': timestamp } | to_json }}"
          - alias: Send awesome-ha-blueprints controller event
            event: ahb_controller_event
            event_data:
              controller: !input zha_controller_device
              action: button_right_long
          - alias: Run custom action with looping
            repeat:
              sequence: !input action_button_right_long
              until: "{{ not button_right_long_loop or repeat.index >= button_right_long_max_loop_repeats | int }}"

      - alias: Right button long press release
        conditions:
          - alias: Left/Right button long press release
            condition: trigger
            id: button_left_right_release
          - alias: Last event was Right button long press
            condition: template
            value_template: "{{ last_controller_event_action == 'button_right_long' }}"
        sequence:
          - alias: Update last controller event helper
            service: input_text.set_value
            data:
              entity_id: !input helper_last_controller_event
              value: "{{ {'a': 'button_right_release', 't': timestamp } | to_json }}"
          - alias: Send awesome-ha-blueprints controller event
            event: ahb_controller_event
            event_data:
              controller: !input zha_controller_device
              action: button_right_release
          - alias: Run custom action
            choose:
              - conditions: []
                sequence: !input action_button_right_release
      
      - alias: Left/Right button long press workaround
        conditions:
          - alias: Left/Right button long press release
            condition: trigger
            id: button_left_right_release
          - alias: Hold duration was 0
            condition: template
            value_template: "{{ trigger.event.data.args[0] == 0 }}"
        sequence:
          - alias: Update last controller event helper
            service: input_text.set_value
            data:
              entity_id: !input helper_last_controller_event
              value: "{{ { 'a': 'button_left_right_long', 't': timestamp } | to_json }}"
