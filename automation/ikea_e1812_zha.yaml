# Copyright (c) 2023 Calvin Walton <calvin.walton@kepstin.ca>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

blueprint:
  name: IKEA E1812 TRÅDFRI Shortcut Button (ZHA, firmware 24.x.x)
  description: >
    Automation for performing actions triggered by an IKEA E1812 TRÅDFRI
    Shortcut Button.
    Supports ZHA only, requires that the button is upgraded to firmware 24.x.x.



    This integration generates events compatible with Hooks from the
    [Awesome HA Blueprints](https://epmatt.github.io/awesome-ha-blueprints)
    project.



    Version: 1.0.0
    
    License: [MIT](https://spdx.org/licenses/MIT.html)
  author: kepstin
  source_url: https://github.com/kepstin/ha-blueprints/blob/main/automation/ikea_e1812_zha.yaml
  domain: automation
  input:
    zha_controller_device:
      name: ZHA Controller Device (required)
      selector:
        device:
          integration: zha
          manufacturer: IKEA of Sweden
          model: TRADFRI SHORTCUT Button
          multiple: false

    action_button_short:
      name: Short press action
      default: []
      selector:
        action:

    action_button_double:
      name: Double press action
      default: []
      selector:
        action:

    action_button_long:
      name: Long press action
      default: []
      selector:
        action:
        
    button_long_loop:
      name: Loop long press action until release
      default: false
      selector:
        boolean:

    action_button_release:
      name: Long press release action
      default: []
      selector:
        action:

    max_loop_repeats:
      name: Long press maximum loop repeats
      description: >
        Maximum number of repeats for the action when looping is enabled.
        Use it as a safety limit to prevent an endless loop in case the
        corresponding stop event is not received.
      default: 500
      selector:
        number:
          min: 1
          max: 5000
          mode: slider
          step: 1

mode: restart
max_exceeded: silent

variables:
  button_long_loop: !input button_long_loop
  max_loop_repeats: !input max_loop_repeats

trigger:
  - alias: Short press
    id: button_short
    platform: device
    device_id: !input zha_controller_device
    domain: zha
    type: remote_button_short_press
    subtype: turn_on
    
  - alias: Double press
    id: button_double
    platform: device
    device_id: !input zha_controller_device
    domain: zha
    type: remote_button_double_press
    subtype: turn_on
    
  - alias: Long press
    id: button_long
    platform: device
    device_id: !input zha_controller_device
    domain: zha
    type: remote_button_long_press
    subtype: dim_up
    
  - alias: Long press release
    id: button_release
    platform: device
    device_id: !input zha_controller_device
    domain: zha
    type: remote_button_long_release
    subtype: dim_up

action:
  - choose:
      - alias: Short press
        conditions:
          - condition: trigger
            id: button_short
        sequence:
          - alias: Send awesome-ha-blueprints controller event
            event: ahb_controller_event
            event_data:
              controller: !input zha_controller_device
              action: button_short
          - alias: Run custom action
            choose:
              - conditions: []
                sequence: !input action_button_short

      - alias: Double press
        conditions:
          - condition: trigger
            id: button_double
        sequence:
          - alias: Send awesome-ha-blueprints controller event
            event: ahb_controller_event
            event_data:
              controller: !input zha_controller_device
              action: button_double
          - alias: Run custom action
            choose:
              - conditions: []
                sequence: !input action_button_double

      - alias: Long press
        conditions:
          - condition: trigger
            id: button_long
        sequence:
          - alias: Send awesome-ha-blueprints controller event
            event: ahb_controller_event
            event_data:
              controller: !input zha_controller_device
              action: button_long
          - alias: Run custom action with looping
            repeat:
              sequence: !input action_button_long
              until: "{{ not button_long_loop or repeat.index >= max_loop_repeats | int }}"

      - alias: Long press release
        conditions:
          - condition: trigger
            id: button_release
        sequence:
          - alias: Send awesome-ha-blueprints controller event
            event: ahb_controller_event
            event_data:
              controller: !input zha_controller_device
              action: button_release
          - alias: Run custom action
            choose:
              - conditions: []
                sequence: !input action_button_release
